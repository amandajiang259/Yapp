rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Allow reading any user profile
      allow read: if isAuthenticated();
      // Allow users to update their own profile
      allow update: if isOwner(userId);
      // Allow users to create their own profile
      allow create: if isOwner(userId);
    }

    // Posts collection
    match /posts/{postId} {
      // Allow reading any post
      allow read: if isAuthenticated();
      // Allow users to create their own posts
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow users to update/delete their own posts
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Followers collection
    match /followers/{userId} {
      // Allow reading followers list
      allow read: if isAuthenticated();
      // Allow users to manage their own followers
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Nested following collection
      match /following/{followingId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Messages collection
    match /messages/{messageId} {
      // Allow reading messages if user is a participant in the conversation
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      // Allow creating messages
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      // Allow updating only the read status
      allow update: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }

    // Conversations collection
    match /conversations/{conversationId} {
      // Allow reading conversations if user is a participant
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      // Allow creating conversations
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      // Allow updating only the lastMessage field
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage']);
    }

    // Affirmations collection
    match /affirmations/{affirmationId} {
      // Allow reading any affirmation
      allow read: if isAuthenticated();
      // Allow users to create their own affirmations
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      // Allow users to update/delete their own affirmations
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Prompt responses collection
    match /promptResponses/{responseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 