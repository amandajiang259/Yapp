rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParticipant(conversationId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    // Users collection
    match /users/{userId} {
      // Allow reading any user profile
      allow read: if isAuthenticated();
      // Allow users to update their own profile
      allow update: if isOwner(userId);
      // Allow users to create their own profile
      allow create: if isOwner(userId);
    }

    // Posts collection
    match /posts/{postId} {
      // Allow reading any post
      allow read: if isAuthenticated();
      // Allow users to create their own posts
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow users to update/delete their own posts
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Followers collection
    match /followers/{userId} {
      // Allow reading followers list
      allow read: if isAuthenticated();
      // Allow users to manage their own followers
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Nested following collection
      match /following/{followingId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Messages collection
    match /messages/{messageId} {
      // Allow reading messages if user is a participant in the conversation
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
      // Allow creating messages
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.senderId
      );
      // Allow updating only the read status
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      ) && (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['read'])
      );
      // Allow deleting messages if user is a participant in the conversation
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
    }

    // Conversations collection
    match /conversations/{conversationId} {
      // Allow reading conversations if user is a participant
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants
      );
      // Allow creating conversations
      allow create: if isAuthenticated() && (
        request.auth.uid in request.resource.data.participants
      );
      // Allow updating conversation data
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participants
      );
      // Allow deleting conversations
      allow delete: if isAuthenticated() && (
        request.auth.uid in resource.data.participants
      );
    }

    // Affirmations collection
    match /affirmations/{affirmationId} {
      // Allow reading any affirmation
      allow read: if isAuthenticated();
      // Allow users to create their own affirmations
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      // Allow users to update/delete their own affirmations
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Prompt responses collection
    match /promptResponses/{responseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Personal affirmations collection
    match /personalAffirmations/{affirmationId} {
      // Allow reading all personal affirmations
      allow read: if isAuthenticated();
      
      // Allow creating new affirmations
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'content', 'createdAt', 'userData']) &&
        request.resource.data.userData.keys().hasAll(['id', 'firstName', 'lastName', 'photoURL']);
      
      // Allow updating own affirmations
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['content', 'userData']);
      
      // Allow deleting own affirmations
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 